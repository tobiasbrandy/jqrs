################# JQHS - Tests from JQ manual ##################

## Basic filters

.
"Hello, world!"
"Hello, world!"

. | tojson
12345678909876543212345
"12345678909876543212345"

map([., . == 1]) | tojson
[1, 1.000, 1.0, 100e-2]
"[[1,true],[1,true],[1,true],[1,true]]"

. as $big | [$big, $big + 1] | map(. > 10000000000000000000000000000000)
10000000000000000000000000000001
[true, false]

## "Object Identifier-Index: `.foo`, `.foo.bar`"

.foo
{"foo": 42, "bar": "less interesting data"}
42

.foo
{"notfoo": true, "alsonotfoo": false}
null

.["foo"]
{"foo": 42}
42

## "Optional Object Identifier-Index: `.foo?`"

.foo?
{"foo": 42, "bar": "less interesting data"}
42

.foo?
{"notfoo": true, "alsonotfoo": false}
null

.["foo"]?
{"foo": 42}
42

[.foo?]
[1,2]
[]

## "Array Index: `.[2]`"

.[0]
[{"name":"JSON", "good":true}, {"name":"XML", "good":false}]
{"name":"JSON", "good":true}

.[2]
[{"name":"JSON", "good":true}, {"name":"XML", "good":false}]
null

.[-2]
[1,2,3]
2

## "Array/String Slice: `.[10:15]`"

.[2:4]
["a","b","c","d","e"]
["c", "d"]

.[2:4]
"abcdefghi"
"cd"

.[:3]
["a","b","c","d","e"]
["a", "b", "c"]

.[-2:]
["a","b","c","d","e"]
["d", "e"]

## "Array/Object Value Iterator: `.[]`"

.[]
[{"name":"JSON", "good":true}, {"name":"XML", "good":false}]
{"name":"JSON", "good":true}
{"name":"XML", "good":false}

.[]
[]
# empty

.[]
{"a": 1, "b": 1}
1
1

## "Comma: `,`"

.foo, .bar
{"foo": 42, "bar": "something else", "baz": true}
42
"something else"

.user, .projects[]
{"user":"stedolan", "projects": ["jq", "wikiflow"]}
"stedolan"
"jq"
"wikiflow"

.[4,2]
["a","b","c","d","e"]
"e"
"c"

## "Pipe: `|`"

.[] | .name
[{"name":"JSON", "good":true}, {"name":"XML", "good":false}]
"JSON"
"XML"

## "Parenthesis"

(. + 2) * 5
1
15

## "Array construction: `[]`"

[.user, .projects[]]
{"user":"stedolan", "projects": ["jq", "wikiflow"]}
["stedolan", "jq", "wikiflow"]

[ .[] | . * 2]
[1, 2, 3]
[2, 4, 6]

## "Object Construction: `{}`"

{user, title: .titles[]}
{"user":"stedolan","titles":["JQ Primer", "More JQ"]}
{"user":"stedolan", "title": "JQ Primer"}
{"user":"stedolan", "title": "More JQ"}

{(.user): .titles}
{"user":"stedolan","titles":["JQ Primer", "More JQ"]}
{"stedolan": ["JQ Primer", "More JQ"]}

## "Recursive Descent: `..`"

..|.a?
[[{"a":1}]]
1

## "Addition: `+`"

.a + 1
{"a": 7}
8

.a + .b
{"a": [1,2], "b": [3,4]}
[1,2,3,4]

.a + null
{"a": 1}
1

.a + 1
{}
1

{a: 1} + {b: 2} + {c: 3} + {a: 42}
null
{"a": 42, "b": 2, "c": 3}

## "Subtraction: `-`"

4 - .a
{"a":3}
1

. - ["xml", "yaml"]
["xml", "yaml", "json"]
["json"]

## "Multiplication, division, modulo: `*`, `/`, and `%`"

10 / . * 3
5
6

. / ", "
"a, b,c,d, e"
["a","b,c,d","e"]

{"k": {"a": 1, "b": 2}} * {"k": {"a": 0,"c": 3}}
null
{"k": {"a": 0, "b": 2, "c": 3}}

.[] | (1 / .)?
[1,0,-1]
1
-1

## "`length`"

.[] | length
[[1,2], "string", {"a":2}, null]
2
6
1
0

## "`utf8bytelength`"

utf8bytelength
"\u03bc"
2

## "`keys`, `keys_unsorted`"

keys
{"abc": 1, "abcd": 2, "Foo": 3}
["Foo", "abc", "abcd"]

keys
[42,3,35]
[0,1,2]

## "`has(key)`"

map(has("foo"))
[{"foo": 42}, {}]
[true, false]

map(has(2))
[[0,1], ["a","b","c"]]
[false, true]

## "`in`"

.[] | in({"foo": 42})
["foo", "bar"]
true
false

map(in([0,1]))
[2, 0]
[false, true]

## "`map(x)`, `map_values(x)`"

map(.+1)
[1,2,3]
[2,3,4]

map_values(.+1)
{"a": 1, "b": 2, "c": 3}
{"a": 2, "b": 3, "c": 4}

## "`path(path_expression)`"

path(.a[0].b)
null
["a",0,"b"]

[path(..)]
{"a":[{"b":1}]}
[[],["a"],["a",0],["a",0,"b"]]

## "`del(path_expression)`"

del(.foo)
{"foo": 42, "bar": 9001, "baz": 42}
{"bar": 9001, "baz": 42}

del(.[1, 2])
["foo", "bar", "baz"]
["foo"]

## "`getpath(PATHS)`"

getpath(["a","b"])
null
null

[getpath(["a","b"], ["a","c"])]
{"a":{"b":0, "c":1}}
[0, 1]

## "`setpath(PATHS; VALUE)`"

setpath(["a","b"]; 1)
null
{"a": {"b": 1}}

setpath(["a","b"]; 1)
{"a":{"b":0}}
{"a": {"b": 1}}

setpath([0,"a"]; 1)
null
[{"a":1}]

## "`delpaths(PATHS)`"

delpaths([["a","b"]])
{"a":{"b":1},"x":{"y":2}}
{"a":{},"x":{"y":2}}

## "`to_entries`, `from_entries`, `with_entries`"

to_entries
{"a": 1, "b": 2}
[{"key":"a", "value":1}, {"key":"b", "value":2}]

from_entries
[{"key":"a", "value":1}, {"key":"b", "value":2}]
{"a": 1, "b": 2}

with_entries(.key |= "KEY_" + .)
{"a": 1, "b": 2}
{"KEY_a": 1, "KEY_b": 2}

## "`select(boolean_expression)`"

map(select(. >= 2))
[1,5,3,0,7]
[5,3,7]

.[] | select(.id == "second")
[{"id": "first", "val": 1}, {"id": "second", "val": 2}]
{"id": "second", "val": 2}

## "`arrays`, `objects`, `iterables`, `booleans`, `numbers`, `normals`, `finites`, `strings`, `nulls`, `values`, `scalars`"

.[]|numbers
[[],{},1,"foo",null,true,false]
1

## "`empty`"

1, empty, 2
null
1
2

[1,2,empty,3]
null
[1,2,3]

## "`$__loc__`"

try error("\($__loc__)") catch .
null
"{\"line\":1,\"file\":\"<top-level>\"}"

## "`paths`, `paths(node_filter)`, `leaf_paths`"

[paths]
[1,[[],{"a":2}]]
[[0],[1],[1,0],[1,1],[1,1,"a"]]

[paths(scalars)]
[1,[[],{"a":2}]]
[[0],[1,1,"a"]]

## "`add`"

add
["a","b","c"]
"abc"

add
[1, 2, 3]
6

add
[]
null

## "`any`, `any(condition)`, `any(generator; condition)`"

any
[true, false]
true

any
[false, false]
false

any
[]
false

## "`all`, `all(condition)`, `all(generator; condition)`"

all
[true, false]
false

all
[true, true]
true

all
[]
true

## "`flatten`, `flatten(depth)`"

flatten
[1, [2], [[3]]]
[1, 2, 3]

flatten(1)
[1, [2], [[3]]]
[1, 2, [3]]

flatten
[[]]
[]

flatten
[{"foo": "bar"}, [{"foo": "baz"}]]
[{"foo": "bar"}, {"foo": "baz"}]

## "`range(upto)`, `range(from;upto)`, `range(from;upto;by)`"

range(2;4)
null
2
3

[range(2;4)]
null
[2,3]

[range(4)]
null
[0,1,2,3]

[range(0;10;3)]
null
[0,3,6,9]

[range(0;10;-1)]
null
[]

[range(0;-5;-1)]
null
[0,-1,-2,-3,-4]

## "`floor`"

floor
3.14159
3

## "`sqrt`"

sqrt
9
3

## "`tonumber`"

.[] | tonumber
[1, "1"]
1
1

.[]|tonumber?
["1", "hello", "3", 4]
1
3
4

## "`tostring`"

.[] | tostring
[1, "1", [1]]
"1"
"1"
"[1]"

## "`type`"

map(type)
[0, false, [], {}, null, "hello"]
["number", "boolean", "array", "object", "null", "string"]

## "`infinite`, `nan`, `isinfinite`, `isnan`, `isfinite`, `isnormal`"

.[] | (infinite * .) < 0
[-1, 1]
true
false

infinite, nan | type
null
"number"
"number"

## "`sort`, `sort_by(path_expression)`"

sort
[8,3,null,6]
[null,3,6,8]

sort_by(.foo)
[{"foo":4, "bar":10}, {"foo":3, "bar":100}, {"foo":2, "bar":1}]
[{"foo":2, "bar":1}, {"foo":3, "bar":100}, {"foo":4, "bar":10}]

## "`group_by(path_expression)`"

group_by(.foo)
[{"foo":1, "bar":10}, {"foo":3, "bar":100}, {"foo":1, "bar":1}]
[[{"foo":1, "bar":10}, {"foo":1, "bar":1}], [{"foo":3, "bar":100}]]

## "`min`, `max`, `min_by(path_exp)`, `max_by(path_exp)`"

min
[5,4,2,7]
2

max_by(.foo)
[{"foo":1, "bar":14}, {"foo":2, "bar":3}]
{"foo":2, "bar":3}

## "`unique`, `unique_by(path_exp)`"

unique
[1,2,5,3,5,3,1,3]
[1,2,3,5]

unique_by(.foo)
[{"foo": 1, "bar": 2}, {"foo": 1, "bar": 3}, {"foo": 4, "bar": 5}]
[{"foo": 1, "bar": 2}, {"foo": 4, "bar": 5}]

unique_by(length)
["chunky", "bacon", "kitten", "cicada", "asparagus"]
["bacon", "chunky", "asparagus"]

## "`reverse`"

reverse
[1,2,3,4]
[4,3,2,1]

## "`contains(element)`"

contains("bar")
"foobar"
true

contains(["baz", "bar"])
["foobar", "foobaz", "blarp"]
true

contains(["bazzzzz", "bar"])
["foobar", "foobaz", "blarp"]
false

contains({foo: 12, bar: [{barp: 12}]})
{"foo": 12, "bar":[1,2,{"barp":12, "blip":13}]}
true

contains({foo: 12, bar: [{barp: 15}]})
{"foo": 12, "bar":[1,2,{"barp":12, "blip":13}]}
false

## "`indices(s)`"

indices(", ")
"a,b, cd, efg, hijk"
[3,7,12]

indices(1)
[0,1,2,1,3,1,4]
[1,3,5]

indices([1,2])
[0,1,2,3,1,4,2,5,1,2,6,7]
[1,8]

## "`index(s)`, `rindex(s)`"

index(", ")
"a,b, cd, efg, hijk"
3

rindex(", ")
"a,b, cd, efg, hijk"
12

## "`inside`"

inside("foobar")
"bar"
true

inside(["foobar", "foobaz", "blarp"])
["baz", "bar"]
true

inside(["foobar", "foobaz", "blarp"])
["bazzzzz", "bar"]
false

inside({"foo": 12, "bar":[1,2,{"barp":12, "blip":13}]})
{"foo": 12, "bar": [{"barp": 12}]}
true

inside({"foo": 12, "bar":[1,2,{"barp":12, "blip":13}]})
{"foo": 12, "bar": [{"barp": 15}]}
false

## "`startswith(str)`"

[.[]|startswith("foo")]
["fo", "foo", "barfoo", "foobar", "barfoob"]
[false, true, false, true, false]

## "`endswith(str)`"

[.[]|endswith("foo")]
["foobar", "barfoo"]
[false, true]

## "`combinations`, `combinations(n)`"

combinations
[[1,2], [3, 4]]
[1, 3]
[1, 4]
[2, 3]
[2, 4]

combinations(2)
[0, 1]
[0, 0]
[0, 1]
[1, 0]
[1, 1]

## "`ltrimstr(str)`"

[.[]|ltrimstr("foo")]
["fo", "foo", "barfoo", "foobar", "afoo"]
["fo","","barfoo","bar","afoo"]

## "`rtrimstr(str)`"

[.[]|rtrimstr("foo")]
["fo", "foo", "barfoo", "foobar", "foob"]
["fo","","bar","foobar","foob"]

## "`explode`"

explode
"foobar"
[102,111,111,98,97,114]

## "`implode`"

implode
[65, 66, 67]
"ABC"

## "`split(str)`"

split(", ")
"a, b,c,d, e, "
["a","b,c,d","e",""]

## "`join(str)`"

join(", ")
["a","b,c,d","e"]
"a, b,c,d, e"

join(" ")
["a",1,2.3,true,null,false]
"a 1 2.3 true  false"

## "`ascii_downcase`, `ascii_upcase`"

ascii_upcase
"useful but not for é"
"USEFUL BUT NOT FOR é"

## "`while(cond; update)`"

[while(.<100; .*2)]
1
[1,2,4,8,16,32,64]

## "`repeat(exp)`"

[repeat(.*2, error)?]
1
[2]

## "`until(cond; next)`"

[.,1]|until(.[0] < 1; [.[0] - 1, .[1] * .[0]])|.[1]
4
24

## "`recurse(f)`, `recurse`, `recurse(f; condition)`, `recurse_down`"

recurse(.foo[])
{"foo":[{"foo": []}, {"foo":[{"foo":[]}]}]}
{"foo":[{"foo":[]},{"foo":[{"foo":[]}]}]}
{"foo":[]}
{"foo":[{"foo":[]}]}
{"foo":[]}

recurse
{"a":0,"b":[1]}
{"a":0,"b":[1]}
0
[1]
1

recurse(. * .; . < 20)
2
2
4
16

## "`walk(f)`"

walk(if type == "array" then sort else . end)
[[4, 1, 7], [8, 5, 2], [3, 6, 9]]
[[1,4,7],[2,5,8],[3,6,9]]

walk( if type == "object" then with_entries( .key |= sub( "^_+"; "") ) else . end )
[ { "_a": { "__b": 2 } } ]
[{"a":{"b":2}}]

# Not Implemented: env
## "`$ENV`, `env`"

# $ENV.PAGER
# null
# "less"

# env.PAGER
# null
# "less"

## "`transpose`"

transpose
[[1], [2,3]]
[[1,2],[null,3]]

## "`bsearch(x)`"

bsearch(0)
[0,1]
0

bsearch(0)
[1,2,3]
-1

bsearch(4) as $ix | if $ix < 0 then .[-(1+$ix)] = 4 else . end
[1,2,3]
[1,2,3,4]

## "String interpolation - `\\(foo)`"

"The input was \(.), which is one less than \(.+1)"
42
"The input was 42, which is one less than 43"

## "Convert to/from JSON"

[.[]|tostring]
[1, "foo", ["foo"]]
["1","foo","[\"foo\"]"]

[.[]|tojson]
[1, "foo", ["foo"]]
["1","\"foo\"","[\"foo\"]"]

[.[]|tojson|fromjson]
[1, "foo", ["foo"]]
[1,"foo",["foo"]]

## "Format strings and escaping"

@html
"This works if x < y"
"This works if x &lt; y"

@html "<span>Anonymous said: \(.)</span>"
"<script>alert(\"lol hax\");</script>"
"<span>Anonymous said: &lt;script&gt;alert(&quot;lol hax&quot;);&lt;/script&gt;</span>"

@sh "echo \(.)"
"O'Hara's Ale"
"echo 'O'\\''Hara'\\''s Ale'"

@base64
"This is a message"
"VGhpcyBpcyBhIG1lc3NhZ2U="

@base64d
"VGhpcyBpcyBhIG1lc3NhZ2U="
"This is a message"

# Not Implemented: Date Builtins
## "Dates"

# fromdate
# "2015-03-05T23:51:47Z"
# 1425599507

# strptime("%Y-%m-%dT%H:%M:%SZ")
# "2015-03-05T23:51:47Z"
# [2015,2,5,23,51,47,4,63]

# strptime("%Y-%m-%dT%H:%M:%SZ")|mktime
# "2015-03-05T23:51:47Z"
# 1425599507

## Conditionals and Comparisons

.[] == 1
[1, 1.0, "1", "banana"]
true
true
false
false

## if-then-else

if . == 0 then "zero" elif . == 1 then "one" else "many" end
2
"many"

## "`>, >=, <=, <`"

. < 5
2
true

## and/or/not

42 and "a string"
null
true

(true, false) or false
null
true
false

(true, false) and (true, false)
null
true
false
false
# false -- For now jq behaviour doesn't include this false. Uncomment when changed.

(true, true) and (true, false)
null
true
false
true
false

[true, false | not]
null
[false, true]

## "Alternative operator: `//`"

.foo // 42
{"foo": 19}
19

.foo // 42
{}
42

## try-catch

try .a catch ". is not an object"
true
". is not an object"

[.[]|try .a]
[{}, true, {"a":1}]
[null, 1]

try error("some exception") catch .
true
"some exception"

## "Error Suppression / Optional Operator: `?`"

[.[]|(.a)?]
[{}, true, {"a":1}]
[null, 1]

## Regular expressions (PCRE)

## "`test(val)`, `test(regex; flags)`"
test("foo")
"foo"
true

.[] | test("a b c # spaces are ignored"; "ix")
["xabcd", "ABC"]
true
true

## "`match(val)`, `match(regex; flags)`"

match("(abc)+"; "g")
"abc abc"
{"offset": 0, "length": 3, "string": "abc", "captures": [{"offset": 0, "length": 3, "string": "abc", "name": null}]}
{"offset": 4, "length": 3, "string": "abc", "captures": [{"offset": 4, "length": 3, "string": "abc", "name": null}]}

match("foo")
"foo bar foo"
{"offset": 0, "length": 3, "string": "foo", "captures": []}

match(["foo", "ig"])
"foo bar FOO"
{"offset": 0, "length": 3, "string": "foo", "captures": []}
{"offset": 8, "length": 3, "string": "FOO", "captures": []}

match("foo (?<bar123>bar)? foo"; "ig")
"foo bar foo foo  foo"
{"offset": 0, "length": 11, "string": "foo bar foo", "captures": [{"offset": 4, "length": 3, "string": "bar", "name": "bar123"}]}
{"offset": 12, "length": 8, "string": "foo  foo", "captures": [{"offset": -1, "length": 0, "string": null, "name": "bar123"}]}

[ match("."; "g")] | length
"abc"
3

## "`capture(val)`, `capture(regex; flags)`"

capture("(?<a>[a-z]+)-(?<n>[0-9]+)")
"xyzzy-14"
{ "a": "xyzzy", "n": "14" }

## "`scan(regex)`, `scan(regex; flags)`"

scan("c")
"abcdefabc"
"c"
"c"

scan("b")
"" ""
# empty

## "`split(regex; flags)`"

split(", *"; null)
"ab,cd, ef"
["ab","cd","ef"]

## "`splits(regex)`, `splits(regex; flags)`"

splits(", *")
"ab,cd" "ef, gh"
"ab"
"cd"
"ef"
"gh"

## "`sub(regex; tostring)`, `sub(regex; string; flags)`"

sub("^[^a-z]*(?<x>[a-z]*).*"; "Z\(.x)Z\(.x)")
"123abc456"
"ZabcZabc"

## "`gsub(regex; string)`, `gsub(regex; string; flags)`"

gsub("(?<x>.)[^a]*"; "+\(.x)-")
"Abcabc"
"+A-+a-"

## "Variable / Symbolic Binding Operator: `... as $identifier | ...`"

.bar as $x | .foo | . + $x
{"foo":10, "bar":200}
210

. as $i|[(.*2|. as $i| $i), $i]
5
[10,5]

# Not Implemented: Destructuring
# . as [$a, $b, {c: $c}] | $a + $b + $c
# [2, 3, {"c": 4, "d": 5}]
# 9

# Not Implemented: Destructuring
# .[] as [$a, $b] | {a: $a, b: $b}
# [[0], [0, 1], [2, 1, 0]]
# {"a":0,"b":null}
# {"a":0,"b":1}, {"a":2,"b":1}

# Not Implemented: Destructuring
## Destructuring Alternative Operator: `?//`

# .[] as {$a, $b, c: {$d, $e}} ?// {$a, $b, c: [{$d, $e}]} | {$a, $b, $d, $e}
# [{"a": 1, "b": 2, "c": {"d": 3, "e": 4}}, {"a": 1, "b": 2, "c": [{"d": 3, "e": 4}]}]
# {"a":1,"b":2,"d":3,"e":4}
# {"a":1,"b":2,"d":3,"e":4}

# .[] as {$a, $b, c: {$d}} ?// {$a, $b, c: [{$e}]} | {$a, $b, $d, $e}
# [{"a": 1, "b": 2, "c": {"d": 3, "e": 4}}, {"a": 1, "b": 2, "c": [{"d": 3, "e": 4}]}]
# {"a":1,"b":2,"d":3,"e":null}
# {"a":1,"b":2,"d":null,"e":4}

# .[] as [$a] ?// [$b] | if $a != null then error("err: \($a)") else {$a,$b} end
# [[3]]
# {"a":null,"b":3}

## Defining Functions

def addvalue(f): . + [f]; map(addvalue(.[0]))
[[1,2],[10,20]]
[[1,2,1], [10,20,10]]

def addvalue(f): f as $x | map(. + $x); addvalue(.[0])
[[1,2],[10,20]]
[[1,2,1,2], [10,20,1,2]]

## Reduce

reduce .[] as $item (0; . + $item)
[10,2,5,3]
20

## "`isempty(exp)`"

isempty(empty)
null
true

## "`limit(n; exp)`"

[limit(3;.[])]
[0,1,2,3,4,5,6,7,8,9]
[0,1,2]

## "`first(expr)`, `last(expr)`, `nth(n; expr)`"

[first(range(.)), last(range(.)), nth(./2; range(.))]
10
[0,9,5]

## "`first`, `last`, `nth(n)`"

[range(.)]|[first, last, nth(5)]
10
[0,9,5]

## "`foreach`"

[foreach .[] as $item ([[],[]]; if $item == null then [[],.[0]] else [(.[0] + [$item]),[]] end; if $item == null then .[1] else empty end)]
[1,2,3,4,null,"a","b",null]
[[1,2,3,4],["a","b"]]

## Generators and iterators

def range(init; upto; by): def _range: if (by > 0 and . < upto) or (by < 0 and . > upto) then ., ((.+by)|_range) else . end; if by == 0 then init else init|_range end | select((by > 0 and . < upto) or (by < 0 and . > upto)); range(0; 10; 3)
null
0
3
6
9

def while(cond; update): def _while: if cond then ., (update | _while) else empty end; _while; [while(.<100; .*2)]
1
[1,2,4,8,16,32,64]

## Streaming

## "`truncate_stream(stream_expression)`"

[1|truncate_stream([[0],1],[[1,0],2],[[1,0]],[[1]])]
1
[[[0],2],[[0]]]

## "`fromstream(stream_expression)`"

fromstream(1|truncate_stream([[0],1],[[1,0],2],[[1,0]],[[1]]))
null
[2]

## "`tostream`"

. as $dot|fromstream($dot|tostream)|.==$dot
[0,[1,{"a":1},{"b":2}]]
true

## Assignment

## "Update-assignment: `|=`"

(..|select(type=="boolean")) |= if . then 1 else 0 end
[true,false,[5,true,[true,[false]],false]]
[1,0,[5,1,[1,[0]],0]]

## "Arithmetic update-assignment: `+=`, `-=`, `*=`, `/=`, `%=`, `//=`"

.foo += 1
{"foo": 42}
{"foo": 43}
